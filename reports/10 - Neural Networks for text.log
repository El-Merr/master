Traceback (most recent call last):
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/jvanscho/miniforge3/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/jvanscho/miniforge3/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.linear_model import LogisticRegressionCV

# Fit CountVectorizer on the first 5000 reviews 
data_size = 5000 # You can get a few % better in the full dataset, but takes longer
train_text = [' '.join([reverse_word_index.get(i, '?') for i in train_data[d]]) for d in range(data_size)]
test_text = [' '.join([reverse_word_index.get(i, '?') for i in test_data[d]]) for d in range(data_size)]

vect = CountVectorizer()
train_text_vec = vect.fit_transform(train_text)
test_text_vec = vect.transform(test_text)

lr = LogisticRegressionCV().fit(train_text_vec, train_labels[:data_size])
acc = lr.score(test_text_vec, test_labels[:data_size])
print("Logistic regression accuracy:",acc)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyboardInterrupt[0m                         Traceback (most recent call last)
[0;32m/var/folders/0t/5d8ttqzd773fy0wq3h5db0xr0000gn/T/ipykernel_72334/417261067.py[0m in [0;36m<module>[0;34m[0m
[1;32m     10[0m [0mtest_text_vec[0m [0;34m=[0m [0mvect[0m[0;34m.[0m[0mtransform[0m[0;34m([0m[0mtest_text[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     11[0m [0;34m[0m[0m
[0;32m---> 12[0;31m [0mlr[0m [0;34m=[0m [0mLogisticRegressionCV[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mtrain_text_vec[0m[0;34m,[0m [0mtrain_labels[0m[0;34m[[0m[0;34m:[0m[0mdata_size[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     13[0m [0macc[0m [0;34m=[0m [0mlr[0m[0;34m.[0m[0mscore[0m[0;34m([0m[0mtest_text_vec[0m[0;34m,[0m [0mtest_labels[0m[0;34m[[0m[0;34m:[0m[0mdata_size[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m [0mprint[0m[0;34m([0m[0;34m"Logistic regression accuracy:"[0m[0;34m,[0m[0macc[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py[0m in [0;36mfit[0;34m(self, X, y, sample_weight)[0m
[1;32m   2152[0m             [0mprefer[0m [0;34m=[0m [0;34m"processes"[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2153[0m [0;34m[0m[0m
[0;32m-> 2154[0;31m         fold_coefs_ = Parallel(
[0m[1;32m   2155[0m             [0mn_jobs[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mn_jobs[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2156[0m             [0mverbose[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mverbose[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/parallel.py[0m in [0;36m__call__[0;34m(self, iterable)[0m
[1;32m   1001[0m             [0;31m# remaining jobs.[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1002[0m             [0mself[0m[0;34m.[0m[0m_iterating[0m [0;34m=[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1003[0;31m             [0;32mif[0m [0mself[0m[0;34m.[0m[0mdispatch_one_batch[0m[0;34m([0m[0miterator[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1004[0m                 [0mself[0m[0;34m.[0m[0m_iterating[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_original_iterator[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1005[0m [0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/parallel.py[0m in [0;36mdispatch_one_batch[0;34m(self, iterator)[0m
[1;32m    832[0m                 [0;32mreturn[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[1;32m    833[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 834[0;31m                 [0mself[0m[0;34m.[0m[0m_dispatch[0m[0;34m([0m[0mtasks[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    835[0m                 [0;32mreturn[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    836[0m [0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/parallel.py[0m in [0;36m_dispatch[0;34m(self, batch)[0m
[1;32m    751[0m         [0;32mwith[0m [0mself[0m[0;34m.[0m[0m_lock[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    752[0m             [0mjob_idx[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_jobs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 753[0;31m             [0mjob[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_backend[0m[0;34m.[0m[0mapply_async[0m[0;34m([0m[0mbatch[0m[0;34m,[0m [0mcallback[0m[0;34m=[0m[0mcb[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    754[0m             [0;31m# A job can complete so quickly than its callback is[0m[0;34m[0m[0;34m[0m[0m
[1;32m    755[0m             [0;31m# called before we get here, causing self._jobs to[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/_parallel_backends.py[0m in [0;36mapply_async[0;34m(self, func, callback)[0m
[1;32m    199[0m     [0;32mdef[0m [0mapply_async[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mfunc[0m[0;34m,[0m [0mcallback[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    200[0m         [0;34m"""Schedule a func to be run"""[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 201[0;31m         [0mresult[0m [0;34m=[0m [0mImmediateResult[0m[0;34m([0m[0mfunc[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    202[0m         [0;32mif[0m [0mcallback[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    203[0m             [0mcallback[0m[0;34m([0m[0mresult[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/_parallel_backends.py[0m in [0;36m__init__[0;34m(self, batch)[0m
[1;32m    580[0m         [0;31m# Don't delay the application, to avoid keeping the input[0m[0;34m[0m[0;34m[0m[0m
[1;32m    581[0m         [0;31m# arguments in memory[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 582[0;31m         [0mself[0m[0;34m.[0m[0mresults[0m [0;34m=[0m [0mbatch[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    583[0m [0;34m[0m[0m
[1;32m    584[0m     [0;32mdef[0m [0mget[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/parallel.py[0m in [0;36m__call__[0;34m(self)[0m
[1;32m    253[0m         [0;31m# change the default number of processes to -1[0m[0;34m[0m[0;34m[0m[0m
[1;32m    254[0m         [0;32mwith[0m [0mparallel_backend[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_backend[0m[0;34m,[0m [0mn_jobs[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0m_n_jobs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 255[0;31m             return [func(*args, **kwargs)
[0m[1;32m    256[0m                     for func, args, kwargs in self.items]
[1;32m    257[0m [0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/joblib/parallel.py[0m in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m    253[0m         [0;31m# change the default number of processes to -1[0m[0;34m[0m[0;34m[0m[0m
[1;32m    254[0m         [0;32mwith[0m [0mparallel_backend[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_backend[0m[0;34m,[0m [0mn_jobs[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0m_n_jobs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 255[0;31m             return [func(*args, **kwargs)
[0m[1;32m    256[0m                     for func, args, kwargs in self.items]
[1;32m    257[0m [0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/sklearn/utils/fixes.py[0m in [0;36m__call__[0;34m(self, *args, **kwargs)[0m
[1;32m    214[0m     [0;32mdef[0m [0m__call__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    215[0m         [0;32mwith[0m [0mconfig_context[0m[0;34m([0m[0;34m**[0m[0mself[0m[0;34m.[0m[0mconfig[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 216[0;31m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mfunction[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    217[0m [0;34m[0m[0m
[1;32m    218[0m [0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py[0m in [0;36m_log_reg_scoring_path[0;34m(X, y, train, test, pos_class, Cs, scoring, fit_intercept, max_iter, tol, class_weight, verbose, solver, penalty, dual, intercept_scaling, multi_class, random_state, max_squared_sum, sample_weight, l1_ratio)[0m
[1;32m   1058[0m         [0msample_weight[0m [0;34m=[0m [0msample_weight[0m[0;34m[[0m[0mtrain[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m   1059[0m [0;34m[0m[0m
[0;32m-> 1060[0;31m     coefs, Cs, n_iter = _logistic_regression_path(
[0m[1;32m   1061[0m         [0mX_train[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1062[0m         [0my_train[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py[0m in [0;36m_logistic_regression_path[0;34m(X, y, pos_class, Cs, fit_intercept, max_iter, tol, verbose, solver, coef, class_weight, dual, penalty, intercept_scaling, multi_class, random_state, check_input, max_squared_sum, sample_weight, l1_ratio)[0m
[1;32m    804[0m                 [0mnp[0m[0;34m.[0m[0msearchsorted[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0marray[0m[0;34m([0m[0;34m[[0m[0;36m0[0m[0;34m,[0m [0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m,[0m [0;36m3[0m[0;34m][0m[0;34m)[0m[0;34m,[0m [0mverbose[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    805[0m             ]
[0;32m--> 806[0;31m             opt_res = optimize.minimize(
[0m[1;32m    807[0m                 [0mfunc[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    808[0m                 [0mw0[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/scipy/optimize/_minimize.py[0m in [0;36mminimize[0;34m(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)[0m
[1;32m    621[0m                                   **options)
[1;32m    622[0m     [0;32melif[0m [0mmeth[0m [0;34m==[0m [0;34m'l-bfgs-b'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 623[0;31m         return _minimize_lbfgsb(fun, x0, args, jac, bounds,
[0m[1;32m    624[0m                                 callback=callback, **options)
[1;32m    625[0m     [0;32melif[0m [0mmeth[0m [0;34m==[0m [0;34m'tnc'[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniforge3/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py[0m in [0;36m_minimize_lbfgsb[0;34m(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, finite_diff_rel_step, **unknown_options)[0m
[1;32m    349[0m     [0;32mwhile[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    350[0m         [0;31m# x, f, g, wa, iwa, task, csave, lsave, isave, dsave = \[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 351[0;31m         _lbfgsb.setulb(m, x, low_bnd, upper_bnd, nbd, f, g, factr,
[0m[1;32m    352[0m                        [0mpgtol[0m[0;34m,[0m [0mwa[0m[0;34m,[0m [0miwa[0m[0;34m,[0m [0mtask[0m[0;34m,[0m [0miprint[0m[0;34m,[0m [0mcsave[0m[0;34m,[0m [0mlsave[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    353[0m                        isave, dsave, maxls)

[0;31mKeyboardInterrupt[0m: 
KeyboardInterrupt: 

